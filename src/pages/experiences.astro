---
import Experience from "../components/experience/Experience.astro";
import Layout from "../layouts/Layout.astro";
import Teads from "../images/Teads.webp";
import ScalaCenter from "../images/scala-center.webp";
import Line from "../components/Line.astro";
import InlineCode from "../components/InlineCode.astro";
---

<script>
  import { sequencedTransitions } from "../utils/Transitions";

  sequencedTransitions(
    document.querySelectorAll("#page-header > *")!,
    "appear",
  );
</script>

<Layout title="Experiences">
  <section slot="hero" id="page-header">
    <h1>Experiences</h1>
  </section>

  <main>
    <h1>2024</h1>
    <Experience
      title="Software Engineer"
      company="Teads"
      location="Montpellier, France"
      startDate="Sept. 2024"
      endDate="today"
      img={Teads}
    >
      <span slot="title-more"><a href="#teads-internship">(follow-up)</a></span>
      <i>Stack:
        <small>
          Scala, Typescript, Git, GitHub Actions, Terraform, Jenkins, AWS,
          Grafana & Loki, Kibana
        </small>
      </i>

      <ul>
        <li>Finishing the encoding service migration</li>
        <ul>
          <li>
            Unfortunately there was 1 downtime for 2 days, but a fix was found
          </li>
          <li>
            Improved the observability to help detect sooner this kind of
            incident
          </li>
        </ul>
        <li>Finishing the cleanup</li>
        <li>Migrating the CI/CD pipeline from Jekins to GitHub Actions</li>
        <li>Decommissioning of unused services</li>
      </ul>
    </Experience>

    <Line width="80%" />

    <Experience
      title="Assistant Software Engineer"
      company="Teads"
      location="Montpellier, France"
      startDate="Mar. 2024"
      endDate="Aug.2024"
      img={Teads}
      id="teads-internship"
    >
      <i>
        <small>Stack: Scala, Typescript, Git, Terraform, Jenkins, AWS, Kibana </small>
      </i>
      <ul>
        <li>
          Migration of the service we use to encode ads from a legacy,
          discontinued api to a newer one. Refactored the flow, optimized SQL
          transaction (batch writes), parallelized what could be. The goal was
          to have no downtime during the migration.
          <ul>
            <li>
              Double run between the old and new implementation to find
              discrepancies
            </li>
          </ul>
        </li>
        <li>
          Began cleaning up some "legacy" parts to reduce accidental complexity
          and improve development speed
        </li>
        <li>A/B tests driven development</li>
      </ul>
    </Experience>

    <Line width="80%" />

    <h1>2023</h1>
    <Experience
      title="Software Engineer Intern"
      company="Scala Center"
      location="Lausane, Switzerland"
      startDate="Apri. 2023"
      endDate="Aug. 2023"
      img={ScalaCenter}
    >
      <i><small>Tech: Scala, JVM, Scala-Java interop, Reflection</small></i>
      <p>
        Improved the Scala debugger in VS Code with a new evaluation mode, using
        runtime reflection. It is limited to expression that can be <u
          >correctly</u
        > evaluated at runtime (e.g. in the case of overridden method, using reflection
        we could pick a method different from what the compiler would have chosen)
      </p>
      <p>The evaluation is performed in 2 phases:</p>
      <ol>
        <li>
          Validate the expression: correct syntax, evaluable using reflection.
          Transform the expression AST into a custom ADT representing the
          expression, that can later be evaluated
        </li>
        <li>Evaluate the expression</li>
      </ol>
      <p>
        This evaluation includes a <InlineCode>pre-evaluation</InlineCode> mode.
        Instead of using the compile time type of a value, <u>if possible</u> we
        evaluate it and uses its runtime type. It eases the access to runtime information
        during debugging
      </p>
      <p>
        I particularly enjoyed the compiler-related part of the project: ASTs,
        type checking, overloads resolution, etc.
      </p>
      <p>
        As a secondary project, I helped on the implementation of Hot Code
        Replacement (HCR). Meaning that we now can launch a debug session,
        change the code and just reload the session (so we keep the "progress"
        made +/-) instead of restarting from the beginning
      </p>
    </Experience>

    <Line width="80%" />

    <h1>2022</h1>
    <Experience
      title="Assistant Software Engineer"
      company="Teads"
      location="Montpellier, France"
      startDate="Jun. 2022"
      endDate="Aug. 2022"
      img={Teads}
    >
      <i>
        <small
          >Stack: Scala, Typescript, gRPC, React, Git, Github, Cypress, Jenkins
        </small>
      </i>
      <p>
        2-month internship were I worked on the V2 of their demo application. I
        did some backend development with Scala & the Typelevel ecosystem
        (Cats-effect, doobie...) followed by a more front-end part (in the end I
        work on both backend & frontend at the same time)
      </p>

      <p>
        For each feature I developed, I was responsible for the whole lifecyle:
        code, test, deploy, refactor, fix bugs...
      </p>
    </Experience>
  </main>
</Layout>

<style>
  :root {
    --padding: 1rem;
  }

  #page-header > * {
    opacity: 0;
    transform: translateY(100%);
    transition:
      opacity 1s ease,
      transform 1s ease;

    &.appear {
      opacity: 1;
      transform: translateY(0);
    }
  }

  h1 {
    text-align: center;
  }
</style>
